// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OfferStatus {
  Pending
  Declined
  Accepted
}


model Item {
  id             Int        @id @default(autoincrement())
  title          String
  description    String
  ownerId        String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  offersMade     Offer[]    @relation("ItemOffered")
  offersReceived Offer[]    @relation("ItemRequested")
  comments       Comment[]  
  reactions      Reaction[]
}

model Offer {
  id              Int        @id @default(autoincrement())
  itemOfferedId   Int
  itemRequestedId Int
  offeredById     String
  requestedFromId String
  status          OfferStatus
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  itemOffered     Item       @relation("ItemOffered", fields: [itemOfferedId], references: [id])
  itemRequested   Item       @relation("ItemRequested", fields: [itemRequestedId], references: [id])
}

model Comment {
  id        Int        @id @default(autoincrement())
  content   String
  itemId    Int?
  offerId   Int?
  userId    String
  createdAt DateTime   @default(now())
  item      Item?      @relation(fields: [itemId], references: [id])
  reactions Reaction[] 
}

model Reaction {
  id        Int        @id @default(autoincrement())
  emoji     String
  itemId    Int?
  commentId Int?
  userId    String
  createdAt DateTime   @default(now())
  item      Item?      @relation(fields: [itemId], references: [id])
  comment   Comment?   @relation(fields: [commentId], references: [id])
}
